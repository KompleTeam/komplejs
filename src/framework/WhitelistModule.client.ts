/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Timestamp, Uint64, InstantiateMsg, WhitelistConfig, ExecuteMsg, QueryMsg, MigrateMsg, ResponseWrapperForConfigResponse, ConfigResponse, ResponseWrapperForBoolean, ResponseWrapperForArrayOfString } from "./WhitelistModule.types";
export interface WhitelistModuleReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ResponseWrapperForConfigResponse>;
  members: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ResponseWrapperForArrayOfString>;
  isActive: () => Promise<ResponseWrapperForBoolean>;
  isMember: ({
    member
  }: {
    member: string;
  }) => Promise<ResponseWrapperForBoolean>;
}
export class WhitelistModuleQueryClient implements WhitelistModuleReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.members = this.members.bind(this);
    this.isActive = this.isActive.bind(this);
    this.isMember = this.isMember.bind(this);
  }

  config = async (): Promise<ResponseWrapperForConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  members = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ResponseWrapperForArrayOfString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      members: {
        limit,
        start_after: startAfter
      }
    });
  };
  isActive = async (): Promise<ResponseWrapperForBoolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_active: {}
    });
  };
  isMember = async ({
    member
  }: {
    member: string;
  }): Promise<ResponseWrapperForBoolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_member: {
        member
      }
    });
  };
}
export interface WhitelistModuleInterface extends WhitelistModuleReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateWhitelistConfig: ({
    whitelistConfig
  }: {
    whitelistConfig: WhitelistConfig;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  addMembers: ({
    members
  }: {
    members: string[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  removeMembers: ({
    members
  }: {
    members: string[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class WhitelistModuleClient extends WhitelistModuleQueryClient implements WhitelistModuleInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateWhitelistConfig = this.updateWhitelistConfig.bind(this);
    this.addMembers = this.addMembers.bind(this);
    this.removeMembers = this.removeMembers.bind(this);
  }

  updateWhitelistConfig = async ({
    whitelistConfig
  }: {
    whitelistConfig: WhitelistConfig;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_whitelist_config: {
        whitelist_config: whitelistConfig
      }
    }, fee, memo, funds);
  };
  addMembers = async ({
    members
  }: {
    members: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_members: {
        members
      }
    }, fee, memo, funds);
  };
  removeMembers = async ({
    members
  }: {
    members: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_members: {
        members
      }
    }, fee, memo, funds);
  };
}