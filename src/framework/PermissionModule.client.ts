/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Binary, InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, ResponseWrapperForArrayOfString, ResponseWrapperForString } from "./PermissionModule.types";
export interface PermissionModuleReadOnlyInterface {
  contractAddress: string;
  permissionAddress: ({
    permission
  }: {
    permission: string;
  }) => Promise<ResponseWrapperForString>;
  modulePermissions: ({
    module
  }: {
    module: string;
  }) => Promise<ResponseWrapperForArrayOfString>;
  operators: () => Promise<ResponseWrapperForArrayOfString>;
}
export class PermissionModuleQueryClient implements PermissionModuleReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.permissionAddress = this.permissionAddress.bind(this);
    this.modulePermissions = this.modulePermissions.bind(this);
    this.operators = this.operators.bind(this);
  }

  permissionAddress = async ({
    permission
  }: {
    permission: string;
  }): Promise<ResponseWrapperForString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      permission_address: {
        permission
      }
    });
  };
  modulePermissions = async ({
    module
  }: {
    module: string;
  }): Promise<ResponseWrapperForArrayOfString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      module_permissions: {
        module
      }
    });
  };
  operators = async (): Promise<ResponseWrapperForArrayOfString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      operators: {}
    });
  };
}
export interface PermissionModuleInterface extends PermissionModuleReadOnlyInterface {
  contractAddress: string;
  sender: string;
  registerPermission: ({
    codeId,
    msg,
    permission
  }: {
    codeId: number;
    msg?: Binary;
    permission: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateModulePermissions: ({
    module,
    permissions
  }: {
    module: string;
    permissions: string[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateOperators: ({
    addrs
  }: {
    addrs: string[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  check: ({
    module,
    msg
  }: {
    module: string;
    msg: Binary;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  lockExecute: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class PermissionModuleClient extends PermissionModuleQueryClient implements PermissionModuleInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.registerPermission = this.registerPermission.bind(this);
    this.updateModulePermissions = this.updateModulePermissions.bind(this);
    this.updateOperators = this.updateOperators.bind(this);
    this.check = this.check.bind(this);
    this.lockExecute = this.lockExecute.bind(this);
  }

  registerPermission = async ({
    codeId,
    msg,
    permission
  }: {
    codeId: number;
    msg?: Binary;
    permission: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_permission: {
        code_id: codeId,
        msg,
        permission
      }
    }, fee, memo, funds);
  };
  updateModulePermissions = async ({
    module,
    permissions
  }: {
    module: string;
    permissions: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_module_permissions: {
        module,
        permissions
      }
    }, fee, memo, funds);
  };
  updateOperators = async ({
    addrs
  }: {
    addrs: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_operators: {
        addrs
      }
    }, fee, memo, funds);
  };
  check = async ({
    module,
    msg
  }: {
    module: string;
    msg: Binary;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      check: {
        module,
        msg
      }
    }, fee, memo, funds);
  };
  lockExecute = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      lock_execute: {}
    }, fee, memo, funds);
  };
}