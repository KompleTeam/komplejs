/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Binary, InstantiateMsg, ExecuteMsg, Fees, Uint128, CustomPaymentAddress, Cw20ReceiveMsg, QueryMsg, Addr, ResponseWrapperForConfig, Config, ResponseWrapperForFixedFeeResponse, FixedFeeResponse, ResponseWrapperForArrayOfFixedFeeResponse, ResponseWrapperForArrayOfString, Decimal, ResponseWrapperForPercentageFeeResponse, PercentageFeeResponse, ResponseWrapperForArrayOfPercentageFeeResponse, ResponseWrapperForUint128, ResponseWrapperForDecimal } from "./FeeModule.types";
export interface FeeModuleReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ResponseWrapperForConfig>;
  percentageFee: ({
    feeName,
    moduleName
  }: {
    feeName: string;
    moduleName: string;
  }) => Promise<ResponseWrapperForPercentageFeeResponse>;
  fixedFee: ({
    feeName,
    moduleName
  }: {
    feeName: string;
    moduleName: string;
  }) => Promise<ResponseWrapperForFixedFeeResponse>;
  percentageFees: ({
    limit,
    moduleName,
    startAfter
  }: {
    limit?: number;
    moduleName: string;
    startAfter?: string;
  }) => Promise<ResponseWrapperForArrayOfPercentageFeeResponse>;
  fixedFees: ({
    limit,
    moduleName,
    startAfter
  }: {
    limit?: number;
    moduleName: string;
    startAfter?: string;
  }) => Promise<ResponseWrapperForArrayOfFixedFeeResponse>;
  totalPercentageFees: ({
    limit,
    moduleName,
    startAfter
  }: {
    limit?: number;
    moduleName: string;
    startAfter?: string;
  }) => Promise<ResponseWrapperForDecimal>;
  totalFixedFees: ({
    limit,
    moduleName,
    startAfter
  }: {
    limit?: number;
    moduleName: string;
    startAfter?: string;
  }) => Promise<ResponseWrapperForUint128>;
  keys: ({
    feeType,
    limit,
    startAfter
  }: {
    feeType: Fees;
    limit?: number;
    startAfter?: string;
  }) => Promise<ResponseWrapperForArrayOfString>;
}
export class FeeModuleQueryClient implements FeeModuleReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.percentageFee = this.percentageFee.bind(this);
    this.fixedFee = this.fixedFee.bind(this);
    this.percentageFees = this.percentageFees.bind(this);
    this.fixedFees = this.fixedFees.bind(this);
    this.totalPercentageFees = this.totalPercentageFees.bind(this);
    this.totalFixedFees = this.totalFixedFees.bind(this);
    this.keys = this.keys.bind(this);
  }

  config = async (): Promise<ResponseWrapperForConfig> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  percentageFee = async ({
    feeName,
    moduleName
  }: {
    feeName: string;
    moduleName: string;
  }): Promise<ResponseWrapperForPercentageFeeResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      percentage_fee: {
        fee_name: feeName,
        module_name: moduleName
      }
    });
  };
  fixedFee = async ({
    feeName,
    moduleName
  }: {
    feeName: string;
    moduleName: string;
  }): Promise<ResponseWrapperForFixedFeeResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      fixed_fee: {
        fee_name: feeName,
        module_name: moduleName
      }
    });
  };
  percentageFees = async ({
    limit,
    moduleName,
    startAfter
  }: {
    limit?: number;
    moduleName: string;
    startAfter?: string;
  }): Promise<ResponseWrapperForArrayOfPercentageFeeResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      percentage_fees: {
        limit,
        module_name: moduleName,
        start_after: startAfter
      }
    });
  };
  fixedFees = async ({
    limit,
    moduleName,
    startAfter
  }: {
    limit?: number;
    moduleName: string;
    startAfter?: string;
  }): Promise<ResponseWrapperForArrayOfFixedFeeResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      fixed_fees: {
        limit,
        module_name: moduleName,
        start_after: startAfter
      }
    });
  };
  totalPercentageFees = async ({
    limit,
    moduleName,
    startAfter
  }: {
    limit?: number;
    moduleName: string;
    startAfter?: string;
  }): Promise<ResponseWrapperForDecimal> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_percentage_fees: {
        limit,
        module_name: moduleName,
        start_after: startAfter
      }
    });
  };
  totalFixedFees = async ({
    limit,
    moduleName,
    startAfter
  }: {
    limit?: number;
    moduleName: string;
    startAfter?: string;
  }): Promise<ResponseWrapperForUint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_fixed_fees: {
        limit,
        module_name: moduleName,
        start_after: startAfter
      }
    });
  };
  keys = async ({
    feeType,
    limit,
    startAfter
  }: {
    feeType: Fees;
    limit?: number;
    startAfter?: string;
  }): Promise<ResponseWrapperForArrayOfString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      keys: {
        fee_type: feeType,
        limit,
        start_after: startAfter
      }
    });
  };
}
export interface FeeModuleInterface extends FeeModuleReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setFee: ({
    data,
    feeName,
    feeType,
    moduleName
  }: {
    data: Binary;
    feeName: string;
    feeType: Fees;
    moduleName: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  removeFee: ({
    feeName,
    feeType,
    moduleName
  }: {
    feeName: string;
    feeType: Fees;
    moduleName: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  distribute: ({
    customPaymentAddresses,
    feeType,
    moduleName
  }: {
    customPaymentAddresses?: CustomPaymentAddress[];
    feeType: Fees;
    moduleName: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  lockExecute: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class FeeModuleClient extends FeeModuleQueryClient implements FeeModuleInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setFee = this.setFee.bind(this);
    this.removeFee = this.removeFee.bind(this);
    this.distribute = this.distribute.bind(this);
    this.lockExecute = this.lockExecute.bind(this);
    this.receive = this.receive.bind(this);
  }

  setFee = async ({
    data,
    feeName,
    feeType,
    moduleName
  }: {
    data: Binary;
    feeName: string;
    feeType: Fees;
    moduleName: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_fee: {
        data,
        fee_name: feeName,
        fee_type: feeType,
        module_name: moduleName
      }
    }, fee, memo, funds);
  };
  removeFee = async ({
    feeName,
    feeType,
    moduleName
  }: {
    feeName: string;
    feeType: Fees;
    moduleName: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_fee: {
        fee_name: feeName,
        fee_type: feeType,
        module_name: moduleName
      }
    }, fee, memo, funds);
  };
  distribute = async ({
    customPaymentAddresses,
    feeType,
    moduleName
  }: {
    customPaymentAddresses?: CustomPaymentAddress[];
    feeType: Fees;
    moduleName: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      distribute: {
        custom_payment_addresses: customPaymentAddresses,
        fee_type: feeType,
        module_name: moduleName
      }
    }, fee, memo, funds);
  };
  lockExecute = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      lock_execute: {}
    }, fee, memo, funds);
  };
  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, funds);
  };
}