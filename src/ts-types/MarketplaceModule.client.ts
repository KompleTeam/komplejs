/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Binary, InstantiateMsg, ExecuteMsg, Uint128, Listing, Cw20ReceiveMsg, QueryMsg, MigrateMsg, Addr, ResponseWrapperForConfig, Config, ResponseWrapperForFixedListing, FixedListing, ResponseWrapperForArrayOfFixedListing, ResponseWrapperForArrayOfString } from "./MarketplaceModule.types";
export interface MarketplaceModuleReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ResponseWrapperForConfig>;
  fixedListing: ({
    collectionId,
    tokenId
  }: {
    collectionId: number;
    tokenId: number;
  }) => Promise<ResponseWrapperForFixedListing>;
  fixedListings: ({
    collectionId,
    limit,
    startAfter
  }: {
    collectionId: number;
    limit?: number;
    startAfter?: number;
  }) => Promise<ResponseWrapperForArrayOfFixedListing>;
  operators: () => Promise<ResponseWrapperForArrayOfString>;
}
export class MarketplaceModuleQueryClient implements MarketplaceModuleReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.fixedListing = this.fixedListing.bind(this);
    this.fixedListings = this.fixedListings.bind(this);
    this.operators = this.operators.bind(this);
  }

  config = async (): Promise<ResponseWrapperForConfig> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  fixedListing = async ({
    collectionId,
    tokenId
  }: {
    collectionId: number;
    tokenId: number;
  }): Promise<ResponseWrapperForFixedListing> => {
    return this.client.queryContractSmart(this.contractAddress, {
      fixed_listing: {
        collection_id: collectionId,
        token_id: tokenId
      }
    });
  };
  fixedListings = async ({
    collectionId,
    limit,
    startAfter
  }: {
    collectionId: number;
    limit?: number;
    startAfter?: number;
  }): Promise<ResponseWrapperForArrayOfFixedListing> => {
    return this.client.queryContractSmart(this.contractAddress, {
      fixed_listings: {
        collection_id: collectionId,
        limit,
        start_after: startAfter
      }
    });
  };
  operators = async (): Promise<ResponseWrapperForArrayOfString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      operators: {}
    });
  };
}
export interface MarketplaceModuleInterface extends MarketplaceModuleReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateBuyLock: ({
    lock
  }: {
    lock: boolean;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  listFixedToken: ({
    collectionId,
    price,
    tokenId
  }: {
    collectionId: number;
    price: Uint128;
    tokenId: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  delistFixedToken: ({
    collectionId,
    tokenId
  }: {
    collectionId: number;
    tokenId: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updatePrice: ({
    collectionId,
    listingType,
    price,
    tokenId
  }: {
    collectionId: number;
    listingType: Listing;
    price: Uint128;
    tokenId: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  buy: ({
    collectionId,
    listingType,
    tokenId
  }: {
    collectionId: number;
    listingType: Listing;
    tokenId: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  permissionBuy: ({
    buyer,
    collectionId,
    listingType,
    tokenId
  }: {
    buyer: string;
    collectionId: number;
    listingType: Listing;
    tokenId: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateOperators: ({
    addrs
  }: {
    addrs: string[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  lockExecute: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MarketplaceModuleClient extends MarketplaceModuleQueryClient implements MarketplaceModuleInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateBuyLock = this.updateBuyLock.bind(this);
    this.listFixedToken = this.listFixedToken.bind(this);
    this.delistFixedToken = this.delistFixedToken.bind(this);
    this.updatePrice = this.updatePrice.bind(this);
    this.buy = this.buy.bind(this);
    this.permissionBuy = this.permissionBuy.bind(this);
    this.updateOperators = this.updateOperators.bind(this);
    this.lockExecute = this.lockExecute.bind(this);
    this.receive = this.receive.bind(this);
  }

  updateBuyLock = async ({
    lock
  }: {
    lock: boolean;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_buy_lock: {
        lock
      }
    }, fee, memo, funds);
  };
  listFixedToken = async ({
    collectionId,
    price,
    tokenId
  }: {
    collectionId: number;
    price: Uint128;
    tokenId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      list_fixed_token: {
        collection_id: collectionId,
        price,
        token_id: tokenId
      }
    }, fee, memo, funds);
  };
  delistFixedToken = async ({
    collectionId,
    tokenId
  }: {
    collectionId: number;
    tokenId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      delist_fixed_token: {
        collection_id: collectionId,
        token_id: tokenId
      }
    }, fee, memo, funds);
  };
  updatePrice = async ({
    collectionId,
    listingType,
    price,
    tokenId
  }: {
    collectionId: number;
    listingType: Listing;
    price: Uint128;
    tokenId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_price: {
        collection_id: collectionId,
        listing_type: listingType,
        price,
        token_id: tokenId
      }
    }, fee, memo, funds);
  };
  buy = async ({
    collectionId,
    listingType,
    tokenId
  }: {
    collectionId: number;
    listingType: Listing;
    tokenId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      buy: {
        collection_id: collectionId,
        listing_type: listingType,
        token_id: tokenId
      }
    }, fee, memo, funds);
  };
  permissionBuy = async ({
    buyer,
    collectionId,
    listingType,
    tokenId
  }: {
    buyer: string;
    collectionId: number;
    listingType: Listing;
    tokenId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      permission_buy: {
        buyer,
        collection_id: collectionId,
        listing_type: listingType,
        token_id: tokenId
      }
    }, fee, memo, funds);
  };
  updateOperators = async ({
    addrs
  }: {
    addrs: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_operators: {
        addrs
      }
    }, fee, memo, funds);
  };
  lockExecute = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      lock_execute: {}
    }, fee, memo, funds);
  };
  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, funds);
  };
}